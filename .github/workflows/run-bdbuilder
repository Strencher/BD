#!/usr/bin/env node

const _path = require("path");
const _cp = require("child_process");
const _fs = require("fs");

const changedFilesIgnore = [
  "bdbuilder",
  "scripts",
  "UserDetails" // can't compile atm
];
const releaseExtensions = [".md", ".plugin.js"];

const changedFiles = process.argv.slice(2);
const changedPlugins = [...new Set(changedFiles.map(filename => filename.split(_path.sep)[0]))].filter(pluginName =>
  "." !== pluginName[0] &&
  !changedFilesIgnore.includes(pluginName) &&
  _fs.existsSync(_path.resolve(pluginName, "package.json")) &&
  _fs.statSync(pluginName).isDirectory()
);

// Needed while bdbuilder is a submodule; obsolete after npm release
if (changedPlugins.length) {
  _cp.execSync("npm i", {
    cwd: "bdbuilder",
    stdio: ["ignore", "inherit", "inherit"]
  });
}

for (const pluginName of changedPlugins) {
  buildPlugin(pluginName);
}

// reduce artifact size
_fs.readdirSync(".").filter(dirname => !changedPlugins.includes(dirname)).forEach(dirname => {
  _fs.rmSync(dirname, { force: true, recursive: true });
});

function buildPlugin(pluginName) {
  console.log(`Compiling ${pluginName} now.`);
  const pluginDir = _path.resolve(pluginName);

  _cp.execSync("npm i", {
    cwd: pluginDir,
    stdio: ["ignore", "inherit", "inherit"]
  });

  _cp.execSync(`node ./bdbuilder --plugin="${pluginName}" --build --config=bdbuilder.prod.config.json`, {
    cwd: ".",
    stdio: ["ignore", "inherit", "inherit"]
  });

  // reduce artifact size
  _fs.readdirSync(pluginDir).filter(filename =>
    !releaseExtensions.some(extension => filename.endsWith(extension))
  ).forEach(filename => {
    _fs.rmSync(_path.resolve(pluginDir, filename), { force: true, recursive: true });
  });
}
